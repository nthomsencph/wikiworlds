// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { BlocksCreateBlockData, BlocksCreateBlockResponse, BlocksListBlocksData, BlocksListBlocksResponse, BlocksBulkCreateBlocksData, BlocksBulkCreateBlocksResponse, BlocksGetBlockData, BlocksGetBlockResponse, BlocksUpdateBlockData, BlocksUpdateBlockResponse, BlocksDeleteBlockData, BlocksDeleteBlockResponse, EntriesCreateEntryData, EntriesCreateEntryResponse, EntriesListEntriesData, EntriesListEntriesResponse, EntriesListRootEntriesData, EntriesListRootEntriesResponse, EntriesGetEntryData, EntriesGetEntryResponse, EntriesUpdateEntryData, EntriesUpdateEntryResponse, EntriesDeleteEntryData, EntriesDeleteEntryResponse, EntriesMoveEntryData, EntriesMoveEntryResponse, EntriesGetChildrenData, EntriesGetChildrenResponse, EntriesGetAncestorsData, EntriesGetAncestorsResponse, EntriesGetFieldValuesData, EntriesGetFieldValuesResponse, EntriesSetFieldValueData, EntriesSetFieldValueResponse, EntriesSetFieldValuesBulkData, EntriesSetFieldValuesBulkResponse, EntriesGetFieldValueHistoryData, EntriesGetFieldValueHistoryResponse, EntriesDeleteFieldValueData, EntriesDeleteFieldValueResponse, EntryTypesCreateEntryTypeData, EntryTypesCreateEntryTypeResponse, EntryTypesListEntryTypesData, EntryTypesListEntryTypesResponse, EntryTypesGetEntryTypeData, EntryTypesGetEntryTypeResponse, EntryTypesUpdateEntryTypeData, EntryTypesUpdateEntryTypeResponse, EntryTypesDeleteEntryTypeData, EntryTypesDeleteEntryTypeResponse, EntryTypesListFieldsData, EntryTypesListFieldsResponse, EntryTypesCreateFieldData, EntryTypesCreateFieldResponse, EntryTypesUpdateFieldData, EntryTypesUpdateFieldResponse, EntryTypesDeleteFieldData, EntryTypesDeleteFieldResponse, EntryTypesReorderFieldsData, EntryTypesReorderFieldsResponse, ItemsReadItemsData, ItemsReadItemsResponse, ItemsCreateItemData, ItemsCreateItemResponse, ItemsReadItemData, ItemsReadItemResponse, ItemsUpdateItemData, ItemsUpdateItemResponse, ItemsDeleteItemData, ItemsDeleteItemResponse, LoginLoginAccessTokenData, LoginLoginAccessTokenResponse, LoginTestTokenResponse, LoginRecoverPasswordData, LoginRecoverPasswordResponse, LoginResetPasswordData, LoginResetPasswordResponse, LoginRecoverPasswordHtmlContentData, LoginRecoverPasswordHtmlContentResponse, PrivateCreateUserData, PrivateCreateUserResponse, UsersReadUsersData, UsersReadUsersResponse, UsersCreateUserData, UsersCreateUserResponse, UsersReadUserMeResponse, UsersDeleteUserMeResponse, UsersUpdateUserMeData, UsersUpdateUserMeResponse, UsersUpdatePasswordMeData, UsersUpdatePasswordMeResponse, UsersRegisterUserData, UsersRegisterUserResponse, UsersReadUserByIdData, UsersReadUserByIdResponse, UsersUpdateUserData, UsersUpdateUserResponse, UsersDeleteUserData, UsersDeleteUserResponse, UtilsTestEmailData, UtilsTestEmailResponse, UtilsHealthCheckResponse, WeavesCreateWeaveData, WeavesCreateWeaveResponse, WeavesListMyWeavesData, WeavesListMyWeavesResponse, WeavesGetWeaveData, WeavesGetWeaveResponse, WeavesUpdateWeaveData, WeavesUpdateWeaveResponse, WeavesDeleteWeaveData, WeavesDeleteWeaveResponse, WeavesListWeaveMembersData, WeavesListWeaveMembersResponse, WeavesAddWeaveMemberData, WeavesAddWeaveMemberResponse, WeavesUpdateMemberRoleData, WeavesUpdateMemberRoleResponse, WeavesRemoveWeaveMemberData, WeavesRemoveWeaveMemberResponse, WorldsCreateWorldData, WorldsCreateWorldResponse, WorldsListWeaveWorldsData, WorldsListWeaveWorldsResponse, WorldsListPublicWorldsData, WorldsListPublicWorldsResponse, WorldsGetWorldData, WorldsGetWorldResponse, WorldsUpdateWorldData, WorldsUpdateWorldResponse, WorldsDeleteWorldData, WorldsDeleteWorldResponse, WorldsListWorldMembersData, WorldsListWorldMembersResponse, WorldsAddWorldMemberData, WorldsAddWorldMemberResponse, WorldsUpdateMemberRoleData, WorldsUpdateMemberRoleResponse, WorldsRemoveWorldMemberData, WorldsRemoveWorldMemberResponse } from './types.gen';

export class Blocks {
    /**
     * Create Block
     * Create a new block for an entry.
     * @param data The data for the request.
     * @param data.worldId
     * @param data.weaveId
     * @param data.entryId Entry ID to create block for
     * @param data.requestBody
     * @returns BlockPublic Successful Response
     * @throws ApiError
     */
    public static createBlock(data: BlocksCreateBlockData): CancelablePromise<BlocksCreateBlockResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/weaves/{weave_id}/worlds/{world_id}/blocks/',
            path: {
                world_id: data.worldId,
                weave_id: data.weaveId
            },
            query: {
                entry_id: data.entryId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }

    /**
     * List Blocks
     * Get all blocks for an entry.
     *
     * Query parameters:
     * - entry_id: The entry to get blocks for
     * - timeline_year: Optional year to filter blocks by temporal validity
     * @param data The data for the request.
     * @param data.worldId
     * @param data.weaveId
     * @param data.entryId Entry ID to list blocks for
     * @param data.timelineYear Filter by timeline year
     * @returns BlocksPublic Successful Response
     * @throws ApiError
     */
    public static listBlocks(data: BlocksListBlocksData): CancelablePromise<BlocksListBlocksResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/weaves/{weave_id}/worlds/{world_id}/blocks/',
            path: {
                world_id: data.worldId,
                weave_id: data.weaveId
            },
            query: {
                entry_id: data.entryId,
                timeline_year: data.timelineYear
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }

    /**
     * Bulk Create Blocks
     * Create multiple blocks at once for an entry.
     * @param data The data for the request.
     * @param data.worldId
     * @param data.weaveId
     * @param data.entryId Entry ID to create blocks for
     * @param data.requestBody
     * @returns BlocksPublic Successful Response
     * @throws ApiError
     */
    public static bulkCreateBlocks(data: BlocksBulkCreateBlocksData): CancelablePromise<BlocksBulkCreateBlocksResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/weaves/{weave_id}/worlds/{world_id}/blocks/bulk',
            path: {
                world_id: data.worldId,
                weave_id: data.weaveId
            },
            query: {
                entry_id: data.entryId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }

    /**
     * Get Block
     * Get a specific block by ID.
     * @param data The data for the request.
     * @param data.blockId
     * @param data.worldId
     * @param data.weaveId
     * @returns BlockPublic Successful Response
     * @throws ApiError
     */
    public static getBlock(data: BlocksGetBlockData): CancelablePromise<BlocksGetBlockResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/weaves/{weave_id}/worlds/{world_id}/blocks/{block_id}',
            path: {
                block_id: data.blockId,
                world_id: data.worldId,
                weave_id: data.weaveId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }

    /**
     * Update Block
     * Update a block.
     * @param data The data for the request.
     * @param data.blockId
     * @param data.worldId
     * @param data.weaveId
     * @param data.requestBody
     * @returns BlockPublic Successful Response
     * @throws ApiError
     */
    public static updateBlock(data: BlocksUpdateBlockData): CancelablePromise<BlocksUpdateBlockResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/weaves/{weave_id}/worlds/{world_id}/blocks/{block_id}',
            path: {
                block_id: data.blockId,
                world_id: data.worldId,
                weave_id: data.weaveId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }

    /**
     * Delete Block
     * Delete a block.
     * @param data The data for the request.
     * @param data.blockId
     * @param data.worldId
     * @param data.weaveId
     * @returns void Successful Response
     * @throws ApiError
     */
    public static deleteBlock(data: BlocksDeleteBlockData): CancelablePromise<BlocksDeleteBlockResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/weaves/{weave_id}/worlds/{world_id}/blocks/{block_id}',
            path: {
                block_id: data.blockId,
                world_id: data.worldId,
                weave_id: data.weaveId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
}

export class Entries {
    /**
     * Create Entry
     * Create a new Entry in a World.
     * @param data The data for the request.
     * @param data.worldId
     * @param data.weaveId
     * @param data.requestBody
     * @returns EntryPublic Successful Response
     * @throws ApiError
     */
    public static createEntry(data: EntriesCreateEntryData): CancelablePromise<EntriesCreateEntryResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/weaves/{weave_id}/worlds/{world_id}/entries/',
            path: {
                world_id: data.worldId,
                weave_id: data.weaveId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }

    /**
     * List Entries
     * Get all Entries in a World with optional filtering.
     *
     * Query parameters:
     * - entry_type_id: Filter by entry type
     * - timeline_year: Show only entries that existed in this year
     * - skip: Pagination offset
     * - limit: Pagination limit
     * @param data The data for the request.
     * @param data.worldId
     * @param data.weaveId
     * @param data.entryTypeId
     * @param data.timelineYear Filter by timeline year
     * @param data.skip
     * @param data.limit
     * @returns EntriesPublic Successful Response
     * @throws ApiError
     */
    public static listEntries(data: EntriesListEntriesData): CancelablePromise<EntriesListEntriesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/weaves/{weave_id}/worlds/{world_id}/entries/',
            path: {
                world_id: data.worldId,
                weave_id: data.weaveId
            },
            query: {
                entry_type_id: data.entryTypeId,
                timeline_year: data.timelineYear,
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }

    /**
     * List Root Entries
     * Get all root entries (no parent) in a World.
     * @param data The data for the request.
     * @param data.worldId
     * @param data.weaveId
     * @param data.entryTypeId
     * @returns EntriesPublic Successful Response
     * @throws ApiError
     */
    public static listRootEntries(data: EntriesListRootEntriesData): CancelablePromise<EntriesListRootEntriesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/weaves/{weave_id}/worlds/{world_id}/entries/roots',
            path: {
                world_id: data.worldId,
                weave_id: data.weaveId
            },
            query: {
                entry_type_id: data.entryTypeId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }

    /**
     * Get Entry
     * Get a specific Entry by ID with its field values.
     * @param data The data for the request.
     * @param data.entryId
     * @param data.worldId
     * @param data.weaveId
     * @param data.timelineYear Get field values at this year
     * @returns EntryWithFields Successful Response
     * @throws ApiError
     */
    public static getEntry(data: EntriesGetEntryData): CancelablePromise<EntriesGetEntryResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/weaves/{weave_id}/worlds/{world_id}/entries/{entry_id}',
            path: {
                entry_id: data.entryId,
                world_id: data.worldId,
                weave_id: data.weaveId
            },
            query: {
                timeline_year: data.timelineYear
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }

    /**
     * Update Entry
     * Update an Entry.
     * @param data The data for the request.
     * @param data.entryId
     * @param data.worldId
     * @param data.weaveId
     * @param data.requestBody
     * @returns EntryPublic Successful Response
     * @throws ApiError
     */
    public static updateEntry(data: EntriesUpdateEntryData): CancelablePromise<EntriesUpdateEntryResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/weaves/{weave_id}/worlds/{world_id}/entries/{entry_id}',
            path: {
                entry_id: data.entryId,
                world_id: data.worldId,
                weave_id: data.weaveId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }

    /**
     * Delete Entry
     * Delete an Entry (soft delete).
     *
     * By default, only deletes the entry itself. Use recursive=true to delete all descendants.
     * @param data The data for the request.
     * @param data.entryId
     * @param data.worldId
     * @param data.weaveId
     * @param data.recursive Also delete all descendants
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteEntry(data: EntriesDeleteEntryData): CancelablePromise<EntriesDeleteEntryResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/weaves/{weave_id}/worlds/{world_id}/entries/{entry_id}',
            path: {
                entry_id: data.entryId,
                world_id: data.worldId,
                weave_id: data.weaveId
            },
            query: {
                recursive: data.recursive
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }

    /**
     * Move Entry
     * Move an entry to a new parent or to root.
     * @param data The data for the request.
     * @param data.entryId
     * @param data.worldId
     * @param data.weaveId
     * @param data.requestBody
     * @returns EntryPublic Successful Response
     * @throws ApiError
     */
    public static moveEntry(data: EntriesMoveEntryData): CancelablePromise<EntriesMoveEntryResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/weaves/{weave_id}/worlds/{world_id}/entries/{entry_id}/move',
            path: {
                entry_id: data.entryId,
                world_id: data.worldId,
                weave_id: data.weaveId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }

    /**
     * Get Children
     * Get child entries of a parent.
     * @param data The data for the request.
     * @param data.entryId
     * @param data.worldId
     * @param data.weaveId
     * @param data.recursive Get all descendants, not just direct children
     * @returns EntriesPublic Successful Response
     * @throws ApiError
     */
    public static getChildren(data: EntriesGetChildrenData): CancelablePromise<EntriesGetChildrenResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/weaves/{weave_id}/worlds/{world_id}/entries/{entry_id}/children',
            path: {
                entry_id: data.entryId,
                world_id: data.worldId,
                weave_id: data.weaveId
            },
            query: {
                recursive: data.recursive
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }

    /**
     * Get Ancestors
     * Get ancestor entries (breadcrumb trail from root to parent).
     * @param data The data for the request.
     * @param data.entryId
     * @param data.worldId
     * @param data.weaveId
     * @returns EntriesPublic Successful Response
     * @throws ApiError
     */
    public static getAncestors(data: EntriesGetAncestorsData): CancelablePromise<EntriesGetAncestorsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/weaves/{weave_id}/worlds/{world_id}/entries/{entry_id}/ancestors',
            path: {
                entry_id: data.entryId,
                world_id: data.worldId,
                weave_id: data.weaveId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }

    /**
     * Get Field Values
     * Get all field values for an entry.
     * @param data The data for the request.
     * @param data.entryId
     * @param data.worldId
     * @param data.weaveId
     * @param data.timelineYear Get values at this year
     * @returns FieldValuesPublic Successful Response
     * @throws ApiError
     */
    public static getFieldValues(data: EntriesGetFieldValuesData): CancelablePromise<EntriesGetFieldValuesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/weaves/{weave_id}/worlds/{world_id}/entries/{entry_id}/fields',
            path: {
                entry_id: data.entryId,
                world_id: data.worldId,
                weave_id: data.weaveId
            },
            query: {
                timeline_year: data.timelineYear
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }

    /**
     * Set Field Value
     * Set a field value for an entry.
     *
     * For temporal fields, this creates a new value for the specified time period.
     * For non-temporal fields, this updates the existing value.
     * @param data The data for the request.
     * @param data.entryId
     * @param data.worldId
     * @param data.weaveId
     * @param data.requestBody
     * @returns FieldValuePublic Successful Response
     * @throws ApiError
     */
    public static setFieldValue(data: EntriesSetFieldValueData): CancelablePromise<EntriesSetFieldValueResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/weaves/{weave_id}/worlds/{world_id}/entries/{entry_id}/fields',
            path: {
                entry_id: data.entryId,
                world_id: data.worldId,
                weave_id: data.weaveId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }

    /**
     * Set Field Values Bulk
     * Set multiple field values at once.
     * @param data The data for the request.
     * @param data.entryId
     * @param data.worldId
     * @param data.weaveId
     * @param data.requestBody
     * @returns FieldValuesPublic Successful Response
     * @throws ApiError
     */
    public static setFieldValuesBulk(data: EntriesSetFieldValuesBulkData): CancelablePromise<EntriesSetFieldValuesBulkResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/weaves/{weave_id}/worlds/{world_id}/entries/{entry_id}/fields/bulk',
            path: {
                entry_id: data.entryId,
                world_id: data.worldId,
                weave_id: data.weaveId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }

    /**
     * Get Field Value History
     * Get all historical values for a specific field (temporal history).
     * @param data The data for the request.
     * @param data.entryId
     * @param data.fieldDefinitionId
     * @param data.worldId
     * @param data.weaveId
     * @returns FieldValuesPublic Successful Response
     * @throws ApiError
     */
    public static getFieldValueHistory(data: EntriesGetFieldValueHistoryData): CancelablePromise<EntriesGetFieldValueHistoryResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/weaves/{weave_id}/worlds/{world_id}/entries/{entry_id}/fields/{field_definition_id}/history',
            path: {
                entry_id: data.entryId,
                field_definition_id: data.fieldDefinitionId,
                world_id: data.worldId,
                weave_id: data.weaveId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }

    /**
     * Delete Field Value
     * Delete a specific field value (useful for temporal field values).
     * @param data The data for the request.
     * @param data.entryId
     * @param data.fieldValueId
     * @param data.worldId
     * @param data.weaveId
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteFieldValue(data: EntriesDeleteFieldValueData): CancelablePromise<EntriesDeleteFieldValueResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/weaves/{weave_id}/worlds/{world_id}/entries/{entry_id}/fields/{field_value_id}',
            path: {
                entry_id: data.entryId,
                field_value_id: data.fieldValueId,
                world_id: data.worldId,
                weave_id: data.weaveId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
}

export class EntryTypes {
    /**
     * Create Entry Type
     * Create a new EntryType in a World.
     * @param data The data for the request.
     * @param data.worldId
     * @param data.weaveId
     * @param data.requestBody
     * @returns EntryTypePublic Successful Response
     * @throws ApiError
     */
    public static createEntryType(data: EntryTypesCreateEntryTypeData): CancelablePromise<EntryTypesCreateEntryTypeResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/weaves/{weave_id}/worlds/{world_id}/entry-types/',
            path: {
                world_id: data.worldId,
                weave_id: data.weaveId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }

    /**
     * List Entry Types
     * Get all EntryTypes in a World.
     * @param data The data for the request.
     * @param data.worldId
     * @param data.weaveId
     * @param data.skip
     * @param data.limit
     * @returns EntryTypesPublic Successful Response
     * @throws ApiError
     */
    public static listEntryTypes(data: EntryTypesListEntryTypesData): CancelablePromise<EntryTypesListEntryTypesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/weaves/{weave_id}/worlds/{world_id}/entry-types/',
            path: {
                world_id: data.worldId,
                weave_id: data.weaveId
            },
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }

    /**
     * Get Entry Type
     * Get a specific EntryType by ID.
     * @param data The data for the request.
     * @param data.entryTypeId
     * @param data.worldId
     * @param data.weaveId
     * @returns EntryTypePublic Successful Response
     * @throws ApiError
     */
    public static getEntryType(data: EntryTypesGetEntryTypeData): CancelablePromise<EntryTypesGetEntryTypeResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/weaves/{weave_id}/worlds/{world_id}/entry-types/{entry_type_id}',
            path: {
                entry_type_id: data.entryTypeId,
                world_id: data.worldId,
                weave_id: data.weaveId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }

    /**
     * Update Entry Type
     * Update an EntryType.
     * @param data The data for the request.
     * @param data.entryTypeId
     * @param data.worldId
     * @param data.weaveId
     * @param data.requestBody
     * @returns EntryTypePublic Successful Response
     * @throws ApiError
     */
    public static updateEntryType(data: EntryTypesUpdateEntryTypeData): CancelablePromise<EntryTypesUpdateEntryTypeResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/weaves/{weave_id}/worlds/{world_id}/entry-types/{entry_type_id}',
            path: {
                entry_type_id: data.entryTypeId,
                world_id: data.worldId,
                weave_id: data.weaveId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }

    /**
     * Delete Entry Type
     * Delete an EntryType (soft delete).
     *
     * This will not delete entries of this type, but will prevent new entries from being created.
     * @param data The data for the request.
     * @param data.entryTypeId
     * @param data.worldId
     * @param data.weaveId
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteEntryType(data: EntryTypesDeleteEntryTypeData): CancelablePromise<EntryTypesDeleteEntryTypeResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/weaves/{weave_id}/worlds/{world_id}/entry-types/{entry_type_id}',
            path: {
                entry_type_id: data.entryTypeId,
                world_id: data.worldId,
                weave_id: data.weaveId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }

    /**
     * List Fields
     * Get all field definitions for an EntryType.
     * @param data The data for the request.
     * @param data.entryTypeId
     * @param data.worldId
     * @param data.weaveId
     * @returns FieldDefinitionsPublic Successful Response
     * @throws ApiError
     */
    public static listFields(data: EntryTypesListFieldsData): CancelablePromise<EntryTypesListFieldsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/weaves/{weave_id}/worlds/{world_id}/entry-types/{entry_type_id}/fields',
            path: {
                entry_type_id: data.entryTypeId,
                world_id: data.worldId,
                weave_id: data.weaveId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }

    /**
     * Create Field
     * Create a new field definition for an EntryType.
     * @param data The data for the request.
     * @param data.entryTypeId
     * @param data.worldId
     * @param data.weaveId
     * @param data.requestBody
     * @returns FieldDefinitionPublic Successful Response
     * @throws ApiError
     */
    public static createField(data: EntryTypesCreateFieldData): CancelablePromise<EntryTypesCreateFieldResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/weaves/{weave_id}/worlds/{world_id}/entry-types/{entry_type_id}/fields',
            path: {
                entry_type_id: data.entryTypeId,
                world_id: data.worldId,
                weave_id: data.weaveId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }

    /**
     * Update Field
     * Update a field definition.
     * @param data The data for the request.
     * @param data.entryTypeId
     * @param data.fieldId
     * @param data.worldId
     * @param data.weaveId
     * @param data.requestBody
     * @returns FieldDefinitionPublic Successful Response
     * @throws ApiError
     */
    public static updateField(data: EntryTypesUpdateFieldData): CancelablePromise<EntryTypesUpdateFieldResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/weaves/{weave_id}/worlds/{world_id}/entry-types/{entry_type_id}/fields/{field_id}',
            path: {
                entry_type_id: data.entryTypeId,
                field_id: data.fieldId,
                world_id: data.worldId,
                weave_id: data.weaveId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }

    /**
     * Delete Field
     * Delete a field definition.
     *
     * Warning: This will also delete all field values for this field across all entries.
     * @param data The data for the request.
     * @param data.entryTypeId
     * @param data.fieldId
     * @param data.worldId
     * @param data.weaveId
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteField(data: EntryTypesDeleteFieldData): CancelablePromise<EntryTypesDeleteFieldResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/weaves/{weave_id}/worlds/{world_id}/entry-types/{entry_type_id}/fields/{field_id}',
            path: {
                entry_type_id: data.entryTypeId,
                field_id: data.fieldId,
                world_id: data.worldId,
                weave_id: data.weaveId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }

    /**
     * Reorder Fields
     * Reorder field definitions.
     * @param data The data for the request.
     * @param data.entryTypeId
     * @param data.worldId
     * @param data.weaveId
     * @param data.requestBody
     * @returns FieldDefinitionsPublic Successful Response
     * @throws ApiError
     */
    public static reorderFields(data: EntryTypesReorderFieldsData): CancelablePromise<EntryTypesReorderFieldsResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/weaves/{weave_id}/worlds/{world_id}/entry-types/{entry_type_id}/fields/reorder',
            path: {
                entry_type_id: data.entryTypeId,
                world_id: data.worldId,
                weave_id: data.weaveId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
}

export class Items {
    /**
     * Read Items
     * Retrieve items.
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @returns ItemsPublic Successful Response
     * @throws ApiError
     */
    public static readItems(data: ItemsReadItemsData = {}): CancelablePromise<ItemsReadItemsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/items/',
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }

    /**
     * Create Item
     * Create new item.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns ItemPublic Successful Response
     * @throws ApiError
     */
    public static createItem(data: ItemsCreateItemData): CancelablePromise<ItemsCreateItemResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/items/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }

    /**
     * Read Item
     * Get item by ID.
     * @param data The data for the request.
     * @param data.id
     * @returns ItemPublic Successful Response
     * @throws ApiError
     */
    public static readItem(data: ItemsReadItemData): CancelablePromise<ItemsReadItemResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/items/{id}',
            path: {
                id: data.id
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }

    /**
     * Update Item
     * Update an item.
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns ItemPublic Successful Response
     * @throws ApiError
     */
    public static updateItem(data: ItemsUpdateItemData): CancelablePromise<ItemsUpdateItemResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v1/items/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }

    /**
     * Delete Item
     * Delete an item.
     * @param data The data for the request.
     * @param data.id
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteItem(data: ItemsDeleteItemData): CancelablePromise<ItemsDeleteItemResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/items/{id}',
            path: {
                id: data.id
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
}

export class Login {
    /**
     * Login Access Token
     * OAuth2 compatible token login, get an access token for future requests
     * @param data The data for the request.
     * @param data.formData
     * @returns Token Successful Response
     * @throws ApiError
     */
    public static loginAccessToken(data: LoginLoginAccessTokenData): CancelablePromise<LoginLoginAccessTokenResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/login/access-token',
            formData: data.formData,
            mediaType: 'application/x-www-form-urlencoded',
            errors: {
                422: 'Validation Error'
            }
        });
    }

    /**
     * Test Token
     * Test access token
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static testToken(): CancelablePromise<LoginTestTokenResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/login/test-token'
        });
    }

    /**
     * Recover Password
     * Password Recovery
     * @param data The data for the request.
     * @param data.email
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static recoverPassword(data: LoginRecoverPasswordData): CancelablePromise<LoginRecoverPasswordResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/password-recovery/{email}',
            path: {
                email: data.email
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }

    /**
     * Reset Password
     * Reset password
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static resetPassword(data: LoginResetPasswordData): CancelablePromise<LoginResetPasswordResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/reset-password/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }

    /**
     * Recover Password Html Content
     * HTML Content for Password Recovery
     * @param data The data for the request.
     * @param data.email
     * @returns string Successful Response
     * @throws ApiError
     */
    public static recoverPasswordHtmlContent(data: LoginRecoverPasswordHtmlContentData): CancelablePromise<LoginRecoverPasswordHtmlContentResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/password-recovery-html-content/{email}',
            path: {
                email: data.email
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
}

export class Private {
    /**
     * Create User
     * Create a new user.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static createUser(data: PrivateCreateUserData): CancelablePromise<PrivateCreateUserResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/private/users/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
}

export class Users {
    /**
     * Read Users
     * Retrieve users.
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @returns UsersPublic Successful Response
     * @throws ApiError
     */
    public static readUsers(data: UsersReadUsersData = {}): CancelablePromise<UsersReadUsersResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/users/',
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }

    /**
     * Create User
     * Create new user.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static createUser(data: UsersCreateUserData): CancelablePromise<UsersCreateUserResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/users/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }

    /**
     * Read User Me
     * Get current user.
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static readUserMe(): CancelablePromise<UsersReadUserMeResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/users/me'
        });
    }

    /**
     * Delete User Me
     * Delete own user.
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteUserMe(): CancelablePromise<UsersDeleteUserMeResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/users/me'
        });
    }

    /**
     * Update User Me
     * Update own user.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static updateUserMe(data: UsersUpdateUserMeData): CancelablePromise<UsersUpdateUserMeResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/users/me',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }

    /**
     * Update Password Me
     * Update own password.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static updatePasswordMe(data: UsersUpdatePasswordMeData): CancelablePromise<UsersUpdatePasswordMeResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/users/me/password',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }

    /**
     * Register User
     * Create new user without the need to be logged in.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static registerUser(data: UsersRegisterUserData): CancelablePromise<UsersRegisterUserResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/users/signup',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }

    /**
     * Read User By Id
     * Get a specific user by id.
     * @param data The data for the request.
     * @param data.userId
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static readUserById(data: UsersReadUserByIdData): CancelablePromise<UsersReadUserByIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/users/{user_id}',
            path: {
                user_id: data.userId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }

    /**
     * Update User
     * Update a user.
     * @param data The data for the request.
     * @param data.userId
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static updateUser(data: UsersUpdateUserData): CancelablePromise<UsersUpdateUserResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/users/{user_id}',
            path: {
                user_id: data.userId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }

    /**
     * Delete User
     * Delete a user.
     * @param data The data for the request.
     * @param data.userId
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteUser(data: UsersDeleteUserData): CancelablePromise<UsersDeleteUserResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/users/{user_id}',
            path: {
                user_id: data.userId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
}

export class Utils {
    /**
     * Test Email
     * Test emails.
     * @param data The data for the request.
     * @param data.emailTo
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static testEmail(data: UtilsTestEmailData): CancelablePromise<UtilsTestEmailResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/utils/test-email/',
            query: {
                email_to: data.emailTo
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }

    /**
     * Health Check
     * @returns boolean Successful Response
     * @throws ApiError
     */
    public static healthCheck(): CancelablePromise<UtilsHealthCheckResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/utils/health-check/'
        });
    }
}

export class Weaves {
    /**
     * Create Weave
     * Create a new Weave.
     *
     * The current user will be added as the owner.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns WeavePublic Successful Response
     * @throws ApiError
     */
    public static createWeave(data: WeavesCreateWeaveData): CancelablePromise<WeavesCreateWeaveResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/weaves/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }

    /**
     * List My Weaves
     * Get all Weaves the current user has access to.
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @returns WeavesPublic Successful Response
     * @throws ApiError
     */
    public static listMyWeaves(data: WeavesListMyWeavesData = {}): CancelablePromise<WeavesListMyWeavesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/weaves/',
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }

    /**
     * Get Weave
     * Get a specific Weave by ID.
     * @param data The data for the request.
     * @param data.weaveId
     * @returns WeavePublic Successful Response
     * @throws ApiError
     */
    public static getWeave(data: WeavesGetWeaveData): CancelablePromise<WeavesGetWeaveResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/weaves/{weave_id}',
            path: {
                weave_id: data.weaveId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }

    /**
     * Update Weave
     * Update a Weave.
     *
     * Only weave owners and admins can update weave settings.
     * @param data The data for the request.
     * @param data.weaveId
     * @param data.requestBody
     * @returns WeavePublic Successful Response
     * @throws ApiError
     */
    public static updateWeave(data: WeavesUpdateWeaveData): CancelablePromise<WeavesUpdateWeaveResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/weaves/{weave_id}',
            path: {
                weave_id: data.weaveId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }

    /**
     * Delete Weave
     * Delete a Weave (soft delete).
     *
     * Only weave owners can delete the weave. This will also soft delete
     * all worlds within the weave.
     * @param data The data for the request.
     * @param data.weaveId
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteWeave(data: WeavesDeleteWeaveData): CancelablePromise<WeavesDeleteWeaveResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/weaves/{weave_id}',
            path: {
                weave_id: data.weaveId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }

    /**
     * List Weave Members
     * Get all members of a Weave.
     * @param data The data for the request.
     * @param data.weaveId
     * @returns WeaveUserPublic Successful Response
     * @throws ApiError
     */
    public static listWeaveMembers(data: WeavesListWeaveMembersData): CancelablePromise<WeavesListWeaveMembersResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/weaves/{weave_id}/members',
            path: {
                weave_id: data.weaveId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }

    /**
     * Add Weave Member
     * Add a new member to a Weave.
     *
     * Only weave owners and admins can invite new members.
     * @param data The data for the request.
     * @param data.weaveId
     * @param data.requestBody
     * @returns WeaveUserPublic Successful Response
     * @throws ApiError
     */
    public static addWeaveMember(data: WeavesAddWeaveMemberData): CancelablePromise<WeavesAddWeaveMemberResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/weaves/{weave_id}/members',
            path: {
                weave_id: data.weaveId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }

    /**
     * Update Member Role
     * Update a member's role in a Weave.
     *
     * Only weave owners and admins can update member roles.
     * @param data The data for the request.
     * @param data.userId
     * @param data.weaveId
     * @param data.requestBody
     * @returns WeaveUserPublic Successful Response
     * @throws ApiError
     */
    public static updateMemberRole(data: WeavesUpdateMemberRoleData): CancelablePromise<WeavesUpdateMemberRoleResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/weaves/{weave_id}/members/{user_id}',
            path: {
                user_id: data.userId,
                weave_id: data.weaveId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }

    /**
     * Remove Weave Member
     * Remove a member from a Weave.
     *
     * Only weave owners and admins can remove members.
     * Users cannot remove the last owner.
     * @param data The data for the request.
     * @param data.userId
     * @param data.weaveId
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static removeWeaveMember(data: WeavesRemoveWeaveMemberData): CancelablePromise<WeavesRemoveWeaveMemberResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/weaves/{weave_id}/members/{user_id}',
            path: {
                user_id: data.userId,
                weave_id: data.weaveId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
}

export class Worlds {
    /**
     * Create World
     * Create a new World within a Weave.
     *
     * The current user will be added as the admin.
     * @param data The data for the request.
     * @param data.weaveId
     * @param data.requestBody
     * @returns WorldPublic Successful Response
     * @throws ApiError
     */
    public static createWorld(data: WorldsCreateWorldData): CancelablePromise<WorldsCreateWorldResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/weaves/{weave_id}/worlds/',
            path: {
                weave_id: data.weaveId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }

    /**
     * List Weave Worlds
     * Get all Worlds in a Weave that the current user has access to.
     * @param data The data for the request.
     * @param data.weaveId
     * @param data.skip
     * @param data.limit
     * @returns WorldsPublic Successful Response
     * @throws ApiError
     */
    public static listWeaveWorlds(data: WorldsListWeaveWorldsData): CancelablePromise<WorldsListWeaveWorldsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/weaves/{weave_id}/worlds/',
            path: {
                weave_id: data.weaveId
            },
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }

    /**
     * List Public Worlds
     * Get all public Worlds (no authentication required).
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @returns WorldsPublic Successful Response
     * @throws ApiError
     */
    public static listPublicWorlds(data: WorldsListPublicWorldsData = {}): CancelablePromise<WorldsListPublicWorldsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/weaves/{weave_id}/worlds/public',
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }

    /**
     * Get World
     * Get a specific World by ID.
     * @param data The data for the request.
     * @param data.worldId
     * @param data.weaveId
     * @returns WorldPublic Successful Response
     * @throws ApiError
     */
    public static getWorld(data: WorldsGetWorldData): CancelablePromise<WorldsGetWorldResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/weaves/{weave_id}/worlds/{world_id}',
            path: {
                world_id: data.worldId,
                weave_id: data.weaveId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }

    /**
     * Update World
     * Update a World.
     *
     * Only world admins and weave owners/admins can update world settings.
     * @param data The data for the request.
     * @param data.worldId
     * @param data.weaveId
     * @param data.requestBody
     * @returns WorldPublic Successful Response
     * @throws ApiError
     */
    public static updateWorld(data: WorldsUpdateWorldData): CancelablePromise<WorldsUpdateWorldResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/weaves/{weave_id}/worlds/{world_id}',
            path: {
                world_id: data.worldId,
                weave_id: data.weaveId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }

    /**
     * Delete World
     * Delete a World (soft delete).
     *
     * Only world admins and weave owners/admins can delete the world.
     * This will also soft delete all entries within the world.
     * @param data The data for the request.
     * @param data.worldId
     * @param data.weaveId
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteWorld(data: WorldsDeleteWorldData): CancelablePromise<WorldsDeleteWorldResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/weaves/{weave_id}/worlds/{world_id}',
            path: {
                world_id: data.worldId,
                weave_id: data.weaveId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }

    /**
     * List World Members
     * Get all members of a World.
     * @param data The data for the request.
     * @param data.worldId
     * @param data.weaveId
     * @returns WorldUserPublic Successful Response
     * @throws ApiError
     */
    public static listWorldMembers(data: WorldsListWorldMembersData): CancelablePromise<WorldsListWorldMembersResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/weaves/{weave_id}/worlds/{world_id}/members',
            path: {
                world_id: data.worldId,
                weave_id: data.weaveId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }

    /**
     * Add World Member
     * Add a new member to a World.
     *
     * Only world admins and weave owners/admins can invite new members.
     * @param data The data for the request.
     * @param data.worldId
     * @param data.weaveId
     * @param data.requestBody
     * @returns WorldUserPublic Successful Response
     * @throws ApiError
     */
    public static addWorldMember(data: WorldsAddWorldMemberData): CancelablePromise<WorldsAddWorldMemberResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/weaves/{weave_id}/worlds/{world_id}/members',
            path: {
                world_id: data.worldId,
                weave_id: data.weaveId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }

    /**
     * Update Member Role
     * Update a member's role in a World.
     *
     * Only world admins and weave owners/admins can update member roles.
     * @param data The data for the request.
     * @param data.userId
     * @param data.worldId
     * @param data.weaveId
     * @param data.requestBody
     * @returns WorldUserPublic Successful Response
     * @throws ApiError
     */
    public static updateMemberRole(data: WorldsUpdateMemberRoleData): CancelablePromise<WorldsUpdateMemberRoleResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/weaves/{weave_id}/worlds/{world_id}/members/{user_id}',
            path: {
                user_id: data.userId,
                world_id: data.worldId,
                weave_id: data.weaveId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }

    /**
     * Remove World Member
     * Remove a member from a World.
     *
     * Only world admins and weave owners/admins can remove members.
     * @param data The data for the request.
     * @param data.userId
     * @param data.worldId
     * @param data.weaveId
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static removeWorldMember(data: WorldsRemoveWorldMemberData): CancelablePromise<WorldsRemoveWorldMemberResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/weaves/{weave_id}/worlds/{world_id}/members/{user_id}',
            path: {
                user_id: data.userId,
                world_id: data.worldId,
                weave_id: data.weaveId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
}