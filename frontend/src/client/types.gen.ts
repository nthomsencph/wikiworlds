// This file is auto-generated by @hey-api/openapi-ts

/**
 * Schema for creating a new Block.
 */
export type BlockCreate = {
    block_type: string;
    content?: {
        [key: string]: unknown;
    };
    parent_block_id?: (string | null);
    position?: number;
    timeline_start_year?: (number | null);
    timeline_start_month?: (number | null);
    timeline_start_day?: (number | null);
    timeline_end_year?: (number | null);
    timeline_end_month?: (number | null);
    timeline_end_day?: (number | null);
    timeline_is_circa?: boolean;
    timeline_is_ongoing?: boolean;
    timeline_display_override?: (string | null);
    is_collapsed?: boolean;
    background_color?: (string | null);
    text_color?: (string | null);
};

/**
 * Public schema for Block responses.
 */
export type BlockPublic = {
    block_type: string;
    content?: {
        [key: string]: unknown;
    };
    id: string;
    entry_id: string;
    parent_block_id: (string | null);
    position: number;
    timeline_start_year: (number | null);
    timeline_start_month: (number | null);
    timeline_start_day: (number | null);
    timeline_end_year: (number | null);
    timeline_end_month: (number | null);
    timeline_end_day: (number | null);
    timeline_is_circa: boolean;
    timeline_is_ongoing: boolean;
    timeline_display_override: (string | null);
    is_collapsed: boolean;
    background_color: (string | null);
    text_color: (string | null);
    version: number;
    created_at: string;
    updated_at: string;
};

/**
 * Schema for list of Blocks.
 */
export type BlocksPublic = {
    data: Array<BlockPublic>;
    count: number;
};

/**
 * Schema for updating a Block.
 */
export type BlockUpdate = {
    block_type?: (string | null);
    content?: ({
    [key: string]: unknown;
} | null);
    parent_block_id?: (string | null);
    position?: (number | null);
    timeline_start_year?: (number | null);
    timeline_start_month?: (number | null);
    timeline_start_day?: (number | null);
    timeline_end_year?: (number | null);
    timeline_end_month?: (number | null);
    timeline_end_day?: (number | null);
    timeline_is_circa?: (boolean | null);
    timeline_is_ongoing?: (boolean | null);
    timeline_display_override?: (string | null);
    is_collapsed?: (boolean | null);
    background_color?: (string | null);
    text_color?: (string | null);
};

export type Body_login_login_access_token = {
    grant_type?: (string | null);
    username: string;
    password: string;
    scope?: string;
    client_id?: (string | null);
    client_secret?: (string | null);
};

/**
 * Schema for creating multiple blocks at once.
 */
export type BulkBlocksCreate = {
    blocks: Array<BlockCreate>;
};

/**
 * Schema for setting multiple field values at once.
 */
export type BulkFieldValues = {
    field_values: Array<FieldValueCreate>;
};

/**
 * Schema for paginated list of Entries.
 */
export type EntriesPublic = {
    data: Array<EntryPublic>;
    count: number;
};

/**
 * Schema for creating a new Entry.
 */
export type EntryCreate = {
    title: string;
    slug: string;
    icon?: (string | null);
    cover_image?: (string | null);
    entry_type_id: string;
    parent_id?: (string | null);
    timeline_start_year?: (number | null);
    timeline_start_month?: (number | null);
    timeline_start_day?: (number | null);
    timeline_end_year?: (number | null);
    timeline_end_month?: (number | null);
    timeline_end_day?: (number | null);
    timeline_is_circa?: boolean;
    timeline_is_ongoing?: boolean;
    timeline_display_override?: (string | null);
    tags?: Array<(string)>;
};

/**
 * Schema for moving an entry to a new parent.
 */
export type EntryMove = {
    /**
     * UUID of the new parent entry (null for root)
     */
    new_parent_id?: (string | null);
};

/**
 * Public schema for Entry responses.
 */
export type EntryPublic = {
    title: string;
    slug: string;
    icon?: (string | null);
    cover_image?: (string | null);
    id: string;
    world_id: string;
    entry_type_id: string;
    path: string;
    timeline_start_year: (number | null);
    timeline_start_month: (number | null);
    timeline_start_day: (number | null);
    timeline_end_year: (number | null);
    timeline_end_month: (number | null);
    timeline_end_day: (number | null);
    timeline_is_circa: boolean;
    timeline_is_ongoing: boolean;
    timeline_display_override: (string | null);
    position: number;
    created_at: string;
    updated_at: string;
    entry_type_name?: (string | null);
    parent_id?: (string | null);
    children_count?: (number | null);
    character_count?: (number | null);
    tags?: Array<(string)>;
};

/**
 * Schema for creating a new EntryType.
 */
export type EntryTypeCreate = {
    name: string;
    slug: string;
    parent_id?: (string | null);
    default_title?: string;
    title_property?: (string | null);
    settings?: {
        [key: string]: unknown;
    };
};

/**
 * Public schema for EntryType responses.
 */
export type EntryTypePublic = {
    name: string;
    slug: string;
    id: string;
    world_id: string;
    parent_id: (string | null);
    default_title: string;
    title_property: (string | null);
    is_system: boolean;
    settings: {
        [key: string]: unknown;
    };
    created_at: string;
    updated_at: string;
};

/**
 * Schema for paginated list of EntryTypes.
 */
export type EntryTypesPublic = {
    data: Array<EntryTypePublic>;
    count: number;
};

/**
 * Schema for updating an EntryType.
 */
export type EntryTypeUpdate = {
    name?: (string | null);
    parent_id?: (string | null);
    default_title?: (string | null);
    title_property?: (string | null);
    settings?: ({
    [key: string]: unknown;
} | null);
};

/**
 * Entry with field values included.
 */
export type EntryWithFields = {
    title: string;
    slug: string;
    icon?: (string | null);
    cover_image?: (string | null);
    id: string;
    world_id: string;
    entry_type_id: string;
    path: string;
    timeline_start_year: (number | null);
    timeline_start_month: (number | null);
    timeline_start_day: (number | null);
    timeline_end_year: (number | null);
    timeline_end_month: (number | null);
    timeline_end_day: (number | null);
    timeline_is_circa: boolean;
    timeline_is_ongoing: boolean;
    timeline_display_override: (string | null);
    position: number;
    created_at: string;
    updated_at: string;
    entry_type_name?: (string | null);
    parent_id?: (string | null);
    children_count?: (number | null);
    character_count?: (number | null);
    tags?: Array<(string)>;
    field_values?: {
        [key: string]: unknown;
    };
};

/**
 * Schema for creating a new FieldDefinition.
 */
export type FieldDefinitionCreate = {
    name: string;
    slug: string;
    description?: (string | null);
    field_type: string;
    config?: {
        [key: string]: unknown;
    };
    is_required?: boolean;
    default_value?: unknown;
    show_in_table?: boolean;
    show_in_preview?: boolean;
    is_temporal?: boolean;
    position?: (number | null);
};

/**
 * Public schema for FieldDefinition responses.
 */
export type FieldDefinitionPublic = {
    name: string;
    slug: string;
    description?: (string | null);
    field_type: string;
    config?: {
        [key: string]: unknown;
    };
    id: string;
    entry_type_id: string;
    is_required: boolean;
    default_value: unknown;
    show_in_table: boolean;
    show_in_preview: boolean;
    is_temporal: boolean;
    position: number;
    created_at: string;
    updated_at: string;
};

/**
 * Schema for list of FieldDefinitions.
 */
export type FieldDefinitionsPublic = {
    data: Array<FieldDefinitionPublic>;
    count: number;
};

/**
 * Schema for updating a FieldDefinition.
 */
export type FieldDefinitionUpdate = {
    name?: (string | null);
    description?: (string | null);
    config?: ({
    [key: string]: unknown;
} | null);
    is_required?: (boolean | null);
    default_value?: unknown;
    show_in_table?: (boolean | null);
    show_in_preview?: (boolean | null);
    is_temporal?: (boolean | null);
    position?: (number | null);
};

/**
 * Schema for reordering fields.
 */
export type FieldReorderRequest = {
    /**
     * Map of field_id to new position
     */
    field_positions: {
        [key: string]: (number);
    };
};

/**
 * Schema for creating a new FieldValue.
 */
export type FieldValueCreate = {
    value: {
        [key: string]: unknown;
    };
    field_definition_id: string;
    timeline_start_year?: (number | null);
    timeline_start_month?: (number | null);
    timeline_start_day?: (number | null);
    timeline_end_year?: (number | null);
    timeline_end_month?: (number | null);
    timeline_end_day?: (number | null);
    timeline_is_circa?: boolean;
    timeline_is_ongoing?: boolean;
};

/**
 * Public schema for FieldValue responses.
 */
export type FieldValuePublic = {
    value: {
        [key: string]: unknown;
    };
    id: string;
    entry_id: string;
    field_definition_id: string;
    timeline_start_year: (number | null);
    timeline_start_month: (number | null);
    timeline_start_day: (number | null);
    timeline_end_year: (number | null);
    timeline_end_month: (number | null);
    timeline_end_day: (number | null);
    timeline_is_circa: boolean;
    timeline_is_ongoing: boolean;
    created_at: string;
    updated_at: string;
    field_name?: (string | null);
    field_type?: (string | null);
};

/**
 * Schema for list of FieldValues.
 */
export type FieldValuesPublic = {
    data: Array<FieldValuePublic>;
    count: number;
};

export type HTTPValidationError = {
    detail?: Array<ValidationError>;
};

export type ItemCreate = {
    title: string;
    description?: (string | null);
};

export type ItemPublic = {
    title: string;
    description?: (string | null);
    id: string;
    owner_id: string;
};

export type ItemsPublic = {
    data: Array<ItemPublic>;
    count: number;
};

export type ItemUpdate = {
    title?: (string | null);
    description?: (string | null);
};

export type Message = {
    message: string;
};

export type NewPassword = {
    token: string;
    new_password: string;
};

export type PrivateUserCreate = {
    email: string;
    password: string;
    full_name: string;
    is_verified?: boolean;
};

/**
 * Schema for creating a new Tag.
 */
export type TagCreate = {
    name: string;
    slug: string;
    color?: string;
    icon?: (string | null);
    description?: (string | null);
    tag_group?: (string | null);
};

/**
 * Public schema for Tag responses.
 */
export type TagPublic = {
    name: string;
    slug: string;
    color?: string;
    icon?: (string | null);
    description?: (string | null);
    tag_group?: (string | null);
    id: string;
    world_id: string;
    created_at: string;
};

/**
 * Schema for paginated list of Tags.
 */
export type TagsPublic = {
    data: Array<TagPublic>;
    count: number;
};

/**
 * Schema for updating a Tag.
 */
export type TagUpdate = {
    name?: (string | null);
    color?: (string | null);
    icon?: (string | null);
    description?: (string | null);
    tag_group?: (string | null);
};

export type Token = {
    access_token: string;
    token_type?: string;
};

export type UpdatePassword = {
    current_password: string;
    new_password: string;
};

export type UserCreate = {
    email: string;
    is_active?: boolean;
    is_superuser?: boolean;
    full_name?: (string | null);
    password: string;
};

export type UserPublic = {
    email: string;
    is_active?: boolean;
    is_superuser?: boolean;
    full_name?: (string | null);
    id: string;
};

export type UserRegister = {
    email: string;
    password: string;
    full_name?: (string | null);
};

export type UsersPublic = {
    data: Array<UserPublic>;
    count: number;
};

export type UserUpdate = {
    email?: (string | null);
    is_active?: boolean;
    is_superuser?: boolean;
    full_name?: (string | null);
    password?: (string | null);
};

export type UserUpdateMe = {
    full_name?: (string | null);
    email?: (string | null);
};

export type ValidationError = {
    loc: Array<(string | number)>;
    msg: string;
    type: string;
};

/**
 * Schema for creating a new Weave.
 */
export type WeaveCreate = {
    name: string;
    slug: string;
    description?: (string | null);
    icon?: (string | null);
    color?: (string | null);
    subscription_tier?: string;
};

/**
 * Public schema for Weave responses.
 */
export type WeavePublic = {
    name: string;
    slug: string;
    description?: (string | null);
    icon?: (string | null);
    color?: (string | null);
    id: string;
    subscription_tier: string;
    subscription_status: string;
    created_at: string;
    updated_at: string;
    user_role?: (string | null);
};

/**
 * Schema for paginated list of Weaves.
 */
export type WeavesPublic = {
    data: Array<WeavePublic>;
    count: number;
};

/**
 * Schema for updating a Weave.
 */
export type WeaveUpdate = {
    name?: (string | null);
    description?: (string | null);
    icon?: (string | null);
    color?: (string | null);
    settings?: ({
    [key: string]: unknown;
} | null);
};

/**
 * Schema for adding a user to a Weave.
 */
export type WeaveUserCreate = {
    user_id: string;
    role: string;
};

/**
 * Public schema for WeaveUser responses.
 */
export type WeaveUserPublic = {
    user_id: string;
    role: string;
    id: string;
    weave_id: string;
    status: string;
    joined_at: string;
    user_email?: (string | null);
    user_full_name?: (string | null);
};

/**
 * Schema for updating a user's role in a Weave.
 */
export type WeaveUserUpdate = {
    role: string;
};

/**
 * Schema for creating a new World.
 */
export type WorldCreate = {
    name: string;
    slug: string;
    description?: (string | null);
    icon?: (string | null);
    cover_image?: (string | null);
    color?: (string | null);
    is_public?: boolean;
    is_template?: boolean;
};

/**
 * Public schema for World responses.
 */
export type WorldPublic = {
    name: string;
    slug: string;
    description?: (string | null);
    icon?: (string | null);
    cover_image?: (string | null);
    color?: (string | null);
    id: string;
    weave_id: string;
    is_public: boolean;
    is_template: boolean;
    created_at: string;
    updated_at: string;
    user_role?: (string | null);
};

/**
 * Schema for paginated list of Worlds.
 */
export type WorldsPublic = {
    data: Array<WorldPublic>;
    count: number;
};

/**
 * Schema for updating a World.
 */
export type WorldUpdate = {
    name?: (string | null);
    description?: (string | null);
    icon?: (string | null);
    cover_image?: (string | null);
    color?: (string | null);
    is_public?: (boolean | null);
    settings?: ({
    [key: string]: unknown;
} | null);
};

/**
 * Schema for adding a user to a World.
 */
export type WorldUserCreate = {
    user_id: string;
    role: string;
};

/**
 * Public schema for WorldUser responses.
 */
export type WorldUserPublic = {
    user_id: string;
    role: string;
    id: string;
    world_id: string;
    status: string;
    joined_at: string;
    user_email?: (string | null);
    user_full_name?: (string | null);
};

/**
 * Schema for updating a user's role in a World.
 */
export type WorldUserUpdate = {
    role: string;
};

export type BlocksCreateBlockData = {
    /**
     * Entry ID to create block for
     */
    entryId: string;
    requestBody: BlockCreate;
    weaveId: string;
    worldId: string;
};

export type BlocksCreateBlockResponse = (BlockPublic);

export type BlocksListBlocksData = {
    /**
     * Entry ID to list blocks for
     */
    entryId: string;
    /**
     * Filter by timeline year
     */
    timelineYear?: (number | null);
    weaveId: string;
    worldId: string;
};

export type BlocksListBlocksResponse = (BlocksPublic);

export type BlocksBulkCreateBlocksData = {
    /**
     * Entry ID to create blocks for
     */
    entryId: string;
    requestBody: BulkBlocksCreate;
    weaveId: string;
    worldId: string;
};

export type BlocksBulkCreateBlocksResponse = (BlocksPublic);

export type BlocksGetBlockData = {
    blockId: string;
    weaveId: string;
    worldId: string;
};

export type BlocksGetBlockResponse = (BlockPublic);

export type BlocksUpdateBlockData = {
    blockId: string;
    requestBody: BlockUpdate;
    weaveId: string;
    worldId: string;
};

export type BlocksUpdateBlockResponse = (BlockPublic);

export type BlocksDeleteBlockData = {
    blockId: string;
    weaveId: string;
    worldId: string;
};

export type BlocksDeleteBlockResponse = (void);

export type EntriesCreateEntryData = {
    requestBody: EntryCreate;
    weaveId: string;
    worldId: string;
};

export type EntriesCreateEntryResponse = (EntryPublic);

export type EntriesListEntriesData = {
    entryTypeId?: (string | null);
    limit?: number;
    skip?: number;
    /**
     * Filter by timeline year
     */
    timelineYear?: (number | null);
    weaveId: string;
    worldId: string;
};

export type EntriesListEntriesResponse = (EntriesPublic);

export type EntriesListRootEntriesData = {
    entryTypeId?: (string | null);
    weaveId: string;
    worldId: string;
};

export type EntriesListRootEntriesResponse = (EntriesPublic);

export type EntriesGetEntryData = {
    entryId: string;
    /**
     * Get field values at this year
     */
    timelineYear?: (number | null);
    weaveId: string;
    worldId: string;
};

export type EntriesGetEntryResponse = (EntryWithFields);

export type EntriesUpdateEntryData = {
    entryId: string;
    requestBody: EntryCreate;
    weaveId: string;
    worldId: string;
};

export type EntriesUpdateEntryResponse = (EntryPublic);

export type EntriesDeleteEntryData = {
    entryId: string;
    /**
     * Also delete all descendants
     */
    recursive?: boolean;
    weaveId: string;
    worldId: string;
};

export type EntriesDeleteEntryResponse = (Message);

export type EntriesMoveEntryData = {
    entryId: string;
    requestBody: EntryMove;
    weaveId: string;
    worldId: string;
};

export type EntriesMoveEntryResponse = (EntryPublic);

export type EntriesGetChildrenData = {
    entryId: string;
    /**
     * Get all descendants, not just direct children
     */
    recursive?: boolean;
    weaveId: string;
    worldId: string;
};

export type EntriesGetChildrenResponse = (EntriesPublic);

export type EntriesGetAncestorsData = {
    entryId: string;
    weaveId: string;
    worldId: string;
};

export type EntriesGetAncestorsResponse = (EntriesPublic);

export type EntriesGetFieldValuesData = {
    entryId: string;
    /**
     * Get values at this year
     */
    timelineYear?: (number | null);
    weaveId: string;
    worldId: string;
};

export type EntriesGetFieldValuesResponse = (FieldValuesPublic);

export type EntriesSetFieldValueData = {
    entryId: string;
    requestBody: FieldValueCreate;
    weaveId: string;
    worldId: string;
};

export type EntriesSetFieldValueResponse = (FieldValuePublic);

export type EntriesSetFieldValuesBulkData = {
    entryId: string;
    requestBody: BulkFieldValues;
    weaveId: string;
    worldId: string;
};

export type EntriesSetFieldValuesBulkResponse = (FieldValuesPublic);

export type EntriesGetFieldValueHistoryData = {
    entryId: string;
    fieldDefinitionId: string;
    weaveId: string;
    worldId: string;
};

export type EntriesGetFieldValueHistoryResponse = (FieldValuesPublic);

export type EntriesDeleteFieldValueData = {
    entryId: string;
    fieldValueId: string;
    weaveId: string;
    worldId: string;
};

export type EntriesDeleteFieldValueResponse = (Message);

export type EntryTypesCreateEntryTypeData = {
    requestBody: EntryTypeCreate;
    weaveId: string;
    worldId: string;
};

export type EntryTypesCreateEntryTypeResponse = (EntryTypePublic);

export type EntryTypesListEntryTypesData = {
    limit?: number;
    skip?: number;
    weaveId: string;
    worldId: string;
};

export type EntryTypesListEntryTypesResponse = (EntryTypesPublic);

export type EntryTypesGetEntryTypeData = {
    entryTypeId: string;
    weaveId: string;
    worldId: string;
};

export type EntryTypesGetEntryTypeResponse = (EntryTypePublic);

export type EntryTypesUpdateEntryTypeData = {
    entryTypeId: string;
    requestBody: EntryTypeUpdate;
    weaveId: string;
    worldId: string;
};

export type EntryTypesUpdateEntryTypeResponse = (EntryTypePublic);

export type EntryTypesDeleteEntryTypeData = {
    entryTypeId: string;
    weaveId: string;
    worldId: string;
};

export type EntryTypesDeleteEntryTypeResponse = (Message);

export type EntryTypesListFieldsData = {
    entryTypeId: string;
    weaveId: string;
    worldId: string;
};

export type EntryTypesListFieldsResponse = (FieldDefinitionsPublic);

export type EntryTypesCreateFieldData = {
    entryTypeId: string;
    requestBody: FieldDefinitionCreate;
    weaveId: string;
    worldId: string;
};

export type EntryTypesCreateFieldResponse = (FieldDefinitionPublic);

export type EntryTypesUpdateFieldData = {
    entryTypeId: string;
    fieldId: string;
    requestBody: FieldDefinitionUpdate;
    weaveId: string;
    worldId: string;
};

export type EntryTypesUpdateFieldResponse = (FieldDefinitionPublic);

export type EntryTypesDeleteFieldData = {
    entryTypeId: string;
    fieldId: string;
    weaveId: string;
    worldId: string;
};

export type EntryTypesDeleteFieldResponse = (Message);

export type EntryTypesReorderFieldsData = {
    entryTypeId: string;
    requestBody: FieldReorderRequest;
    weaveId: string;
    worldId: string;
};

export type EntryTypesReorderFieldsResponse = (FieldDefinitionsPublic);

export type ItemsReadItemsData = {
    limit?: number;
    skip?: number;
};

export type ItemsReadItemsResponse = (ItemsPublic);

export type ItemsCreateItemData = {
    requestBody: ItemCreate;
};

export type ItemsCreateItemResponse = (ItemPublic);

export type ItemsReadItemData = {
    id: string;
};

export type ItemsReadItemResponse = (ItemPublic);

export type ItemsUpdateItemData = {
    id: string;
    requestBody: ItemUpdate;
};

export type ItemsUpdateItemResponse = (ItemPublic);

export type ItemsDeleteItemData = {
    id: string;
};

export type ItemsDeleteItemResponse = (Message);

export type LoginLoginAccessTokenData = {
    formData: Body_login_login_access_token;
};

export type LoginLoginAccessTokenResponse = (Token);

export type LoginTestTokenResponse = (UserPublic);

export type LoginRecoverPasswordData = {
    email: string;
};

export type LoginRecoverPasswordResponse = (Message);

export type LoginResetPasswordData = {
    requestBody: NewPassword;
};

export type LoginResetPasswordResponse = (Message);

export type LoginRecoverPasswordHtmlContentData = {
    email: string;
};

export type LoginRecoverPasswordHtmlContentResponse = (string);

export type PrivateCreateUserData = {
    requestBody: PrivateUserCreate;
};

export type PrivateCreateUserResponse = (UserPublic);

export type TagsCreateTagData = {
    requestBody: TagCreate;
    weaveId: string;
    worldId: string;
};

export type TagsCreateTagResponse = (TagPublic);

export type TagsListTagsData = {
    limit?: number;
    skip?: number;
    weaveId: string;
    worldId: string;
};

export type TagsListTagsResponse = (TagsPublic);

export type TagsGetTagData = {
    tagId: string;
    weaveId: string;
    worldId: string;
};

export type TagsGetTagResponse = (TagPublic);

export type TagsUpdateTagData = {
    requestBody: TagUpdate;
    tagId: string;
    weaveId: string;
    worldId: string;
};

export type TagsUpdateTagResponse = (TagPublic);

export type TagsDeleteTagData = {
    tagId: string;
    weaveId: string;
    worldId: string;
};

export type TagsDeleteTagResponse = (Message);

export type UsersReadUsersData = {
    limit?: number;
    skip?: number;
};

export type UsersReadUsersResponse = (UsersPublic);

export type UsersCreateUserData = {
    requestBody: UserCreate;
};

export type UsersCreateUserResponse = (UserPublic);

export type UsersReadUserMeResponse = (UserPublic);

export type UsersDeleteUserMeResponse = (Message);

export type UsersUpdateUserMeData = {
    requestBody: UserUpdateMe;
};

export type UsersUpdateUserMeResponse = (UserPublic);

export type UsersUpdatePasswordMeData = {
    requestBody: UpdatePassword;
};

export type UsersUpdatePasswordMeResponse = (Message);

export type UsersRegisterUserData = {
    requestBody: UserRegister;
};

export type UsersRegisterUserResponse = (UserPublic);

export type UsersReadUserByIdData = {
    userId: string;
};

export type UsersReadUserByIdResponse = (UserPublic);

export type UsersUpdateUserData = {
    requestBody: UserUpdate;
    userId: string;
};

export type UsersUpdateUserResponse = (UserPublic);

export type UsersDeleteUserData = {
    userId: string;
};

export type UsersDeleteUserResponse = (Message);

export type UtilsTestEmailData = {
    emailTo: string;
};

export type UtilsTestEmailResponse = (Message);

export type UtilsHealthCheckResponse = (boolean);

export type WeavesCreateWeaveData = {
    requestBody: WeaveCreate;
};

export type WeavesCreateWeaveResponse = (WeavePublic);

export type WeavesListMyWeavesData = {
    limit?: number;
    skip?: number;
};

export type WeavesListMyWeavesResponse = (WeavesPublic);

export type WeavesGetWeaveData = {
    weaveId: string;
};

export type WeavesGetWeaveResponse = (WeavePublic);

export type WeavesUpdateWeaveData = {
    requestBody: WeaveUpdate;
    weaveId: string;
};

export type WeavesUpdateWeaveResponse = (WeavePublic);

export type WeavesDeleteWeaveData = {
    weaveId: string;
};

export type WeavesDeleteWeaveResponse = (Message);

export type WeavesListWeaveMembersData = {
    weaveId: string;
};

export type WeavesListWeaveMembersResponse = (Array<WeaveUserPublic>);

export type WeavesAddWeaveMemberData = {
    requestBody: WeaveUserCreate;
    weaveId: string;
};

export type WeavesAddWeaveMemberResponse = (WeaveUserPublic);

export type WeavesUpdateMemberRoleData = {
    requestBody: WeaveUserUpdate;
    userId: string;
    weaveId: string;
};

export type WeavesUpdateMemberRoleResponse = (WeaveUserPublic);

export type WeavesRemoveWeaveMemberData = {
    userId: string;
    weaveId: string;
};

export type WeavesRemoveWeaveMemberResponse = (Message);

export type WorldsCreateWorldData = {
    requestBody: WorldCreate;
    weaveId: string;
};

export type WorldsCreateWorldResponse = (WorldPublic);

export type WorldsListWeaveWorldsData = {
    limit?: number;
    skip?: number;
    weaveId: string;
};

export type WorldsListWeaveWorldsResponse = (WorldsPublic);

export type WorldsListPublicWorldsData = {
    limit?: number;
    skip?: number;
};

export type WorldsListPublicWorldsResponse = (WorldsPublic);

export type WorldsGetWorldData = {
    weaveId: string;
    worldId: string;
};

export type WorldsGetWorldResponse = (WorldPublic);

export type WorldsUpdateWorldData = {
    requestBody: WorldUpdate;
    weaveId: string;
    worldId: string;
};

export type WorldsUpdateWorldResponse = (WorldPublic);

export type WorldsDeleteWorldData = {
    weaveId: string;
    worldId: string;
};

export type WorldsDeleteWorldResponse = (Message);

export type WorldsListWorldMembersData = {
    weaveId: string;
    worldId: string;
};

export type WorldsListWorldMembersResponse = (Array<WorldUserPublic>);

export type WorldsAddWorldMemberData = {
    requestBody: WorldUserCreate;
    weaveId: string;
    worldId: string;
};

export type WorldsAddWorldMemberResponse = (WorldUserPublic);

export type WorldsUpdateMemberRoleData = {
    requestBody: WorldUserUpdate;
    userId: string;
    weaveId: string;
    worldId: string;
};

export type WorldsUpdateMemberRoleResponse = (WorldUserPublic);

export type WorldsRemoveWorldMemberData = {
    userId: string;
    weaveId: string;
    worldId: string;
};

export type WorldsRemoveWorldMemberResponse = (Message);